{% if uri matches '{upload}' %}
require 'net/http'
require 'uri'

url = URI.parse("{{ base_url }}{{ uri }}")
File.open("example.pdf", "rb") do |file|
    req = Net::HTTP::{{ method|lower|capitalize }}.new(url)
{% if security_enabled -%}
    {% if 'BearerToken' in security_schemes and 'BasicAuth' in security_schemes %}
    req["Authorization"] = "Basic {{ basic_example }}" # Or with Bearer {{ bearer_example }}
    {%~ elseif 'BearerToken' in security_schemes %}
    req["Authorization"] = "Bearer {{ bearer_example }}"
    {%~ elseif 'BasicAuth' in security_schemes %}
    req["Authorization"] = "Basic {{ basic_example }}"
    {%~ endif -%}
{% endif %}
    req["Content-Type"] = "application/pdf"
    req.body = file.read

    response = Net::HTTP.start(url.host, url.port, use_ssl: url.scheme == 'https') do |http|
        http.request(req)
    end

    puts response.body
end
{% else %}
require 'rest-client'

{%~ if method in ['post', 'put', 'patch'] and sample_data is not empty %}
payload = {{ sample_data|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}

{% endif -%}

response = RestClient.{{ method }} '{{ base_url }}{{ uri }}',
{%~ if method in ['post', 'put', 'patch'] and sample_data is not empty %}
    payload.to_json,
{% endif %}
    {
        'Content-Type' => 'application/json',
{% if security_enabled -%}
    {% if 'BearerToken' in security_schemes and 'BasicAuth' in security_schemes %}
        'Authorization' => 'Basic {{ basic_example }}', # Or with Bearer {{ bearer_example }}
    {%~ elseif 'BearerToken' in security_schemes %}
        'Authorization' => 'Bearer {{ bearer_example }}',
    {%~ elseif 'BasicAuth' in security_schemes %}
        'Authorization' => 'Basic {{ basic_example }}',
    {%~ endif -%}
{% endif %}
    }

puts response.body
{% endif %}
using var client = new HttpClient();
client.DefaultRequestHeaders.Add("Content-Type", "application/json");
{% if security_enabled -%}
    {% if 'BearerToken' in security_schemes and 'BasicAuth' in security_schemes %}
client.DefaultRequestHeaders.Add("Basic {{ basic_example }}");  // Or with Bearer {{ bearer_example }}
    {%~ elseif 'BearerToken' in security_schemes %}
client.DefaultRequestHeaders.Add("Bearer {{ bearer_example }}");
    {%~ elseif 'BasicAuth' in security_schemes %}
client.DefaultRequestHeaders.Add("Basic {{ basic_example }}");
    {%~ endif -%}
{% endif %}
{% if uri matches '{upload}' %}

var content = new MultipartFormDataContent();
var fileBytes = File.ReadAllBytes("example.pdf");
content.Add(new ByteArrayContent(fileBytes), "file", "example.pdf");

{% else %}
    {%~ if method in ['post', 'put', 'patch'] and sample_data is not empty %}
var data = "{{ sample_data|json_encode(constant("JSON_PRETTY_PRINT"))|raw }}";
var content = new StringContent(data, Encoding.UTF8, "application/json");
    {% endif -%}
    {%~ if method == 'patch' %}
var request = new HttpRequestMessage(new HttpMethod("{{ method|upper }}"), "{{ base_url }}{{ uri }}")
{
    Content = content
};
    {% endif -%}
{% endif %}
{% if method == 'get' %}
var response = await client.GetAsync("{{ base_url }}{{ uri }}");
{% elseif method == 'post' %}
var response = await client.PostAsync(
    "{{ base_url }}{{ uri }}",
{%~ if sample_data is not empty %}
    content
{% endif -%}
);
{% elseif method == 'put' %}
var response = await client.PutAsync(
    "{{ base_url }}{{ uri }}",
{%~ if sample_data is not empty %}
    content
{% endif -%}
);
{% elseif method == 'patch' %}
var response = await client.SendAsync(request);
{% elseif method == 'delete' %}
var response = await client.DeleteAsync("{{ base_url }}{{ uri }}");
{% endif %}

string result = await response.Content.ReadAsStringAsync();
Console.WriteLine(result);

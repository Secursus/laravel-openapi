using var client = new HttpClient();
client.DefaultRequestHeaders.Add("Content-Type", "application/json");
{% if security_enabled -%}
    {% if 'BearerToken' in security_schemes and 'BasicAuth' in security_schemes %}
client.DefaultRequestHeaders.Add("Basic API_KEY:API_SECRET_KEY");  // Or with Bearer eyJ0eXAiOiJKV1QiLCJ...
    {%~ elseif 'BearerToken' in security_schemes %}
client.DefaultRequestHeaders.Add("Bearer eyJ0eXAiOiJKV1QiLCJ...");
    {%~ elseif 'BasicAuth' in security_schemes %}
client.DefaultRequestHeaders.Add("Basic API_KEY:API_SECRET_KEY");
    {%~ endif -%}
{% endif %}

{%~ if method in ['post', 'put', 'patch'] and sample_data is not empty %}
var data = "{{ sample_data|json_encode(constant("JSON_PRETTY_PRINT"))|raw }}";
var content = new StringContent(data, Encoding.UTF8, "application/json");
{% endif -%}
{%~ if method == 'patch' %}
var request = new HttpRequestMessage(new HttpMethod("{{ method|upper }}"), "{{ base_url }}{{ uri }}")
{
    Content = content
};
{% endif -%}
{% if method == 'get' %}
var response = await client.GetAsync("{{ base_url }}{{ uri }}");
{% elseif method == 'post' %}
var response = await client.PostAsync(
    "{{ base_url }}{{ uri }}",
{%~ if sample_data is not empty %}
    content
{% endif -%}
);
{% elseif method == 'put' %}
var response = await client.PutAsync(
    "{{ base_url }}{{ uri }}",
{%~ if sample_data is not empty %}
    content
{% endif -%}
);
{% elseif method == 'patch' %}
var response = await client.SendAsync(request);
{% elseif method == 'delete' %}
var response = await client.DeleteAsync("{{ base_url }}{{ uri }}");
{% endif %}

string result = await response.Content.ReadAsStringAsync();
Console.WriteLine(result);

import Foundation

let url = URL(string: "{{ base_url }}{{ uri }}")!
var request = URLRequest(url: url)
request.httpMethod = "{{ method|upper }}"
{%~ if uri matches '{upload}' %}
request.setValue("application/pdf", forHTTPHeaderField: "Content-Type")
{%~ elseif method in ['post', 'put', 'patch'] and sample_data is not empty %}
request.setValue("application/json", forHTTPHeaderField: "Content-Type")
{% endif -%}
{% if security_enabled -%}
    {% if 'BearerToken' in security_schemes and 'BasicAuth' in security_schemes %}
request.setValue("Basic {{ basic_example }}", forHTTPHeaderField: "Authorization") # Or with Bearer {{ bearer_example }}
    {%~ elseif 'BearerToken' in security_schemes %}
request.setValue("Bearer {{ bearer_example }}", forHTTPHeaderField: "Authorization")
    {%~ elseif 'BasicAuth' in security_schemes %}
request.setValue("Basic {{ basic_example }}", forHTTPHeaderField: "Authorization")
    {%~ endif -%}
{% endif %}

{%~ if method in ['post', 'put', 'patch'] and sample_data is not empty %}
let data = {{ sample_data|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}

{% endif -%}

{% if uri matches '{upload}' %}
let fileURL = URL(fileURLWithPath: "example.pdf")
let fileData = try? Data(contentsOf: fileURL)
request.httpBody = fileData
{% elseif method in ['post', 'put', 'patch'] and sample_data is not empty %}
request.httpBody = try? JSONSerialization.data(withJSONObject: data)
{% endif %}

let task = URLSession.shared.dataTask(with: request) { data, response, error in
    if let data = data {
        print(String(data: data, encoding: .utf8)!)
    }
}
task.resume()

{% if uri matches '{upload}' %}
HttpClient client = HttpClient.newHttpClient();
File file = new File("example.pdf");
byte[] fileBytes = Files.readAllBytes(file.toPath());

HttpRequest request = HttpRequest.newBuilder()
    .uri(URI.create("{{ base_url }}{{ uri }}"))
{% if security_enabled -%}
    {% if 'BearerToken' in security_schemes and 'BasicAuth' in security_schemes %}
    .header("Authorization", "Basic {{ basic_example }}") // Or with Bearer {{ bearer_example }}
    {%~ elseif 'BearerToken' in security_schemes %}
        .header("Authorization", "Bearer {{ bearer_example }}")
    {%~ elseif 'BasicAuth' in security_schemes %}
        .header("Authorization", "Basic {{ basic_example }}")
    {%~ endif -%}
{% endif %}
    .header("Content-Type", "application/pdf")
    .header("Content-Length", String.valueOf(fileBytes.length))
    .POST(HttpRequest.BodyPublishers.ofByteArray(fileBytes))
    .build();

HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
{% else %}
URL url = new URL("{{ base_url }}{{ uri }}");

HttpURLConnection con = (HttpURLConnection) url.openConnection();
con.setRequestMethod("{{ method|upper }}");
con.setRequestProperty("Content-Type", "application/json;");
{% if security_enabled -%}
    {% if 'BearerToken' in security_schemes and 'BasicAuth' in security_schemes %}
con.setRequestProperty("Authorization", "Basic {{ basic_example }}"); // Or with Bearer {{ bearer_example }}
    {%~ elseif 'BearerToken' in security_schemes %}
con.setRequestProperty("Authorization", "Bearer {{ bearer_example }}");
    {%~ elseif 'BasicAuth' in security_schemes %}
con.setRequestProperty("Authorization", "Basic {{ basic_example }}");
    {%~ endif -%}
{% endif %}
con.setDoOutput(true);

{%~ if method in ['post', 'put', 'patch'] and sample_data is not empty %}
String jsonInputString = '{{ sample_data|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}';
try (OutputStream os = con.getOutputStream()) {
    byte[] input = jsonInputString.getBytes("utf-8");
    os.write(input, 0, input.length);
}
{% endif -%}

BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), "utf-8"));
StringBuilder response = new StringBuilder();
String responseLine;
while ((responseLine = in.readLine()) != null) {
    response.append(responseLine.trim());
}
in.close();
con.disconnect();
{% endif %}
System.out.println(response.toString());
